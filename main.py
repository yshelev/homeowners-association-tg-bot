import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from config import settings
from config import WEBHOOK_URL
from presentation.final_state_machines import ReportForm, OrderForm, UserFSM
from presentation.keyboards.constants import (
    CONTACTS,
    ORDER_CERTIFICATES,
    CREATE_REPORT,
    MASTER_CALL,
    METER_READINGS,
    ALL_CONTACTS, BACK
)
from presentation.keyboards.reply import ReplyKeyboardFabric

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

bot = Bot(token=settings.bot_token)
dp = Dispatcher()

@asynccontextmanager
async def lifespan(app: FastAPI):
    await bot.set_webhook(
        url=WEBHOOK_URL,
        drop_pending_updates=True
    )
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    yield  # –ó–¥–µ—Å—å FastAPI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ

    # Shutdown –ª–æ–≥–∏–∫–∞
    await bot.delete_webhook()
    await bot.session.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω.")
app = FastAPI(lifespan=lifespan)


@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(UserFSM.start)
    kb = ReplyKeyboardFabric.get_problem_type_keyboard()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¢–°–ñ."
                         f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ.", reply_markup=kb)

@dp.message(F.text == CONTACTS, UserFSM.start)
async def contacts(message: Message, state: FSMContext):
    await state.set_state(UserFSM.informed)
    bkb = ReplyKeyboardFabric.back_keyboard()
    await message.answer(f"contacts, user {await state.get_state()}", reply_markup=bkb)

@dp.message(F.text == CREATE_REPORT, UserFSM.start)
async def create_report(message: Message, state: FSMContext):
    await state.set_state(ReportForm.text)
    await state.set_state(UserFSM.prepare)
    bkb = ReplyKeyboardFabric.back_keyboard()
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.", reply_markup=bkb)

@dp.message(F.text == ORDER_CERTIFICATES)
async def order_certificates(message: Message, state: FSMContext):
    await state.set_state(OrderForm.text)
    await state.set_state(UserFSM.prepare)
    bkb = ReplyKeyboardFabric.back_keyboard()
    await message.answer("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –≤–∞–º –Ω—É–∂–Ω–∞.", reply_markup=bkb)

@dp.message(F.text == MASTER_CALL)
async def master_call(message: Message, state: FSMContext):
    await state.set_state(UserFSM.prepare)
    kb = ReplyKeyboardFabric.contacts_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞", reply_markup=kb)

@dp.message(F.text.in_(ALL_CONTACTS))
async def get_contact(message: Message, state: FSMContext):
    await message.answer(ALL_CONTACTS.get(message.text))

@dp.message(F.text == METER_READINGS)
async def meter_readings(message: Message, state: FSMContext):
    await state.set_state(UserFSM.prepare)
    bkb = ReplyKeyboardFabric.back_keyboard()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ –≤–∞—à–∏—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤.", reply_markup=bkb)

@dp.message(ReportForm.text, UserFSM.prepare)
async def handle_report_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await state.clear()
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, —Å–ø–∞—Å–∏–±–æüíò")

@dp.message(OrderForm.text, UserFSM.prepare)
async def handle_report_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
    await state.clear()
    await state.set_state(UserFSM.informed)
    await message.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É, —Å–ø–∞—Å–∏–±–æüíò")

@dp.message(F.text == BACK)
async def handle_back_button(message: Message, state: FSMContext):
    await state.set_state(UserFSM.start)
    kb = ReplyKeyboardFabric.get_problem_type_keyboard()
    await message.answer(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∏–∂–µ.", reply_markup=kb)

@app.post(WEBHOOK_URL)
async def bot_webhook(request: Request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return JSONResponse({"status": "ok"})

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0")